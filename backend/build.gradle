
buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.5.RELEASE")
        classpath("org.postgresql:postgresql:42.2.5")
        classpath("nu.studer:gradle-jooq-plugin:3.0.3")
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'nu.studer.jooq'

group = 'ch.uzh.slamer'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()

}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.modelmapper:modelmapper:2.3.0'
    implementation 'com.auth0:java-jwt:3.4.0'
    implementation 'org.jooq:jooq:3.11.11'
    implementation 'org.jooq:jooq-meta:3.11.11'
    implementation 'org.jooq:jooq-codegen:3.11.11'
    runtime 'org.postgresql:postgresql:42.2.5'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    jooqRuntime 'org.postgresql:postgresql:42.2.5'
}

jooq {
    sample(sourceSets.main) {
        jdbc {
            driver = 'org.postgresql.Driver'
            url = 'jdbc:postgresql://localhost:5432/sla_management'
            user = 'postgres'
            password = 'admin'
            schema = 'public'
        }
        generator {
            name = 'org.jooq.codegen.DefaultGenerator'
            strategy {
                name = 'org.jooq.codegen.DefaultGeneratorStrategy'
            }
            database {
                name = 'org.jooq.meta.postgres.PostgresDatabase'
                inputSchema = 'public'
//                forcedTypes {
//                    forcedType {
//                        name = 'varchar'
//                        expression = '.*'
//                        types = 'JSONB?'
//                    }
//                    forcedType {
//                        name = 'varchar'
//                        expression = '.*'
//                        types = 'INET'
//                    }
//                }
//                // ...
            }
            generate {
                relations = true
                deprecated = false
                records = true
                pojos = true
//                immutablePojos = false
                fluentSetters = true
                pojosEqualsAndHashCode = true
                // ...
            }
            target {
                packageName = 'codegen'
                directory = 'src/main/java/generated/jooq'
                // directory = ...
            }

        }
    }
}

generateSampleJooqSchemaSource {
    outputs.upToDateWhen {
        if (project.hasProperty('rerun')) {
            println "rerun!"
            return false
        } else {
            return true
        }
    }
}
// removes the task dependency from compileJava to generateSampleJooqSchemaSource
//project.tasks.getByName('compileJava').dependsOn -= 'generateSampleJooqSchemaSource'
//org.jooq.util.GenerationTool.generate(writer.toString())