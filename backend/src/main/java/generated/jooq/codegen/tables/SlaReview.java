/*
 * This file is generated by jOOQ.
 */
package codegen.tables;


import codegen.Indexes;
import codegen.Keys;
import codegen.Public;
import codegen.tables.records.SlaReviewRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SlaReview extends TableImpl<SlaReviewRecord> {

    private static final long serialVersionUID = -756371076;

    /**
     * The reference instance of <code>public.sla_review</code>
     */
    public static final SlaReview SLA_REVIEW = new SlaReview();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SlaReviewRecord> getRecordType() {
        return SlaReviewRecord.class;
    }

    /**
     * The column <code>public.sla_review.id</code>.
     */
    public final TableField<SlaReviewRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('sla_review_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.sla_review.property</code>.
     */
    public final TableField<SlaReviewRecord, String> PROPERTY = createField("property", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.sla_review.sla_id</code>.
     */
    public final TableField<SlaReviewRecord, Integer> SLA_ID = createField("sla_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.sla_review.accepted</code>.
     */
    public final TableField<SlaReviewRecord, Boolean> ACCEPTED = createField("accepted", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.sla_review.comment</code>.
     */
    public final TableField<SlaReviewRecord, String> COMMENT = createField("comment", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.sla_review.value</code>.
     */
    public final TableField<SlaReviewRecord, String> VALUE = createField("value", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.sla_review.value_type</code>.
     */
    public final TableField<SlaReviewRecord, String> VALUE_TYPE = createField("value_type", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>public.sla_review</code> table reference
     */
    public SlaReview() {
        this(DSL.name("sla_review"), null);
    }

    /**
     * Create an aliased <code>public.sla_review</code> table reference
     */
    public SlaReview(String alias) {
        this(DSL.name(alias), SLA_REVIEW);
    }

    /**
     * Create an aliased <code>public.sla_review</code> table reference
     */
    public SlaReview(Name alias) {
        this(alias, SLA_REVIEW);
    }

    private SlaReview(Name alias, Table<SlaReviewRecord> aliased) {
        this(alias, aliased, null);
    }

    private SlaReview(Name alias, Table<SlaReviewRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> SlaReview(Table<O> child, ForeignKey<O, SlaReviewRecord> key) {
        super(child, key, SLA_REVIEW);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SLA_REVIEW_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SlaReviewRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SLA_REVIEW;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SlaReviewRecord> getPrimaryKey() {
        return Keys.SLA_REVIEW_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SlaReviewRecord>> getKeys() {
        return Arrays.<UniqueKey<SlaReviewRecord>>asList(Keys.SLA_REVIEW_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<SlaReviewRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SlaReviewRecord, ?>>asList(Keys.SLA_REVIEW__SLA_REVIEW_SLA_ID_FKEY);
    }

    public Sla sla() {
        return new Sla(this, Keys.SLA_REVIEW__SLA_REVIEW_SLA_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SlaReview as(String alias) {
        return new SlaReview(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SlaReview as(Name alias) {
        return new SlaReview(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SlaReview rename(String name) {
        return new SlaReview(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SlaReview rename(Name name) {
        return new SlaReview(name, null);
    }
}
