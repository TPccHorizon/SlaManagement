/*
 * This file is generated by jOOQ.
 */
package codegen.tables;


import codegen.Indexes;
import codegen.Keys;
import codegen.Public;
import codegen.tables.records.SloTypeRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SloType extends TableImpl<SloTypeRecord> {

    private static final long serialVersionUID = 426012598;

    /**
     * The reference instance of <code>public.slo_type</code>
     */
    public static final SloType SLO_TYPE = new SloType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SloTypeRecord> getRecordType() {
        return SloTypeRecord.class;
    }

    /**
     * The column <code>public.slo_type.id</code>.
     */
    public final TableField<SloTypeRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('slo_type_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.slo_type.type</code>.
     */
    public final TableField<SloTypeRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>public.slo_type</code> table reference
     */
    public SloType() {
        this(DSL.name("slo_type"), null);
    }

    /**
     * Create an aliased <code>public.slo_type</code> table reference
     */
    public SloType(String alias) {
        this(DSL.name(alias), SLO_TYPE);
    }

    /**
     * Create an aliased <code>public.slo_type</code> table reference
     */
    public SloType(Name alias) {
        this(alias, SLO_TYPE);
    }

    private SloType(Name alias, Table<SloTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private SloType(Name alias, Table<SloTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> SloType(Table<O> child, ForeignKey<O, SloTypeRecord> key) {
        super(child, key, SLO_TYPE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SLO_TYPE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SloTypeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SLO_TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SloTypeRecord> getPrimaryKey() {
        return Keys.SLO_TYPE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SloTypeRecord>> getKeys() {
        return Arrays.<UniqueKey<SloTypeRecord>>asList(Keys.SLO_TYPE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SloType as(String alias) {
        return new SloType(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SloType as(Name alias) {
        return new SloType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SloType rename(String name) {
        return new SloType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SloType rename(Name name) {
        return new SloType(name, null);
    }
}
