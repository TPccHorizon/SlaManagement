/*
 * This file is generated by jOOQ.
 */
package codegen.tables;


import codegen.Indexes;
import codegen.Keys;
import codegen.Public;
import codegen.tables.records.GanacheUrlRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GanacheUrl extends TableImpl<GanacheUrlRecord> {

    private static final long serialVersionUID = -840018897;

    /**
     * The reference instance of <code>public.ganache_url</code>
     */
    public static final GanacheUrl GANACHE_URL = new GanacheUrl();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GanacheUrlRecord> getRecordType() {
        return GanacheUrlRecord.class;
    }

    /**
     * The column <code>public.ganache_url.id</code>.
     */
    public final TableField<GanacheUrlRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('ganache_url_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.ganache_url.url</code>.
     */
    public final TableField<GanacheUrlRecord, String> URL = createField("url", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>public.ganache_url</code> table reference
     */
    public GanacheUrl() {
        this(DSL.name("ganache_url"), null);
    }

    /**
     * Create an aliased <code>public.ganache_url</code> table reference
     */
    public GanacheUrl(String alias) {
        this(DSL.name(alias), GANACHE_URL);
    }

    /**
     * Create an aliased <code>public.ganache_url</code> table reference
     */
    public GanacheUrl(Name alias) {
        this(alias, GANACHE_URL);
    }

    private GanacheUrl(Name alias, Table<GanacheUrlRecord> aliased) {
        this(alias, aliased, null);
    }

    private GanacheUrl(Name alias, Table<GanacheUrlRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> GanacheUrl(Table<O> child, ForeignKey<O, GanacheUrlRecord> key) {
        super(child, key, GANACHE_URL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.GANACHE_URL_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<GanacheUrlRecord, Integer> getIdentity() {
        return Keys.IDENTITY_GANACHE_URL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<GanacheUrlRecord> getPrimaryKey() {
        return Keys.GANACHE_URL_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<GanacheUrlRecord>> getKeys() {
        return Arrays.<UniqueKey<GanacheUrlRecord>>asList(Keys.GANACHE_URL_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GanacheUrl as(String alias) {
        return new GanacheUrl(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GanacheUrl as(Name alias) {
        return new GanacheUrl(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public GanacheUrl rename(String name) {
        return new GanacheUrl(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GanacheUrl rename(Name name) {
        return new GanacheUrl(name, null);
    }
}
